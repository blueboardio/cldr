// +build ignore

/*
Copyright (c) 2018 BlueBoard SAS.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strconv"

	"golang.org/x/text/unicode/cldr"

	"github.com/dolmen-go/codegen"
)

const template = `// Code generated by "go run currencies_gen.go {{.file}}"; DO NOT EDIT.

package currency

// ActiveCurrencies is the list of current legal tender currencies from Unicode CLDR.
//
// Source: {{.file}}
// See https://unicode.org/cldr/charts/33/supplemental/detailed_territory_currency_information.html.
var ActiveCurrencies = map[Code]*Info{
{{range .currencies -}}
	{{printf "%q: {Code: %q, Fraction: FractionInfo{Digits: %d, Rounding: %d, CashDigits: %d, CashRounding: %d}, Countries: %#v}" .Code .Code .Digits .Rounding .CashDigits .CashRounding .Countries }},
{{end}}
}

const (
	// Maximum cash fraction digits of any ActiveCurrencies
	MaxFractionCashDigits = {{.maxFractionCashDigits}}
)
`

func atou(s string, defaul uint) uint {
	if len(s) == 0 {
		return defaul
	}
	u, err := strconv.ParseUint(s, 10, 8)
	if err != nil {
		panic(err)
	}
	return uint(u)
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("")

	// Ex: cldr-common-32.0.1.zip
	cldrArchivePath := os.Args[1]
	zip, err := os.Open(cldrArchivePath)
	if err != nil {
		log.Fatalf("%s: %s", cldrArchivePath, err)
	}

	cldrDecoder := &cldr.Decoder{}
	log.Println("Loading...")
	db, err := cldrDecoder.DecodeZip(zip)
	if err != nil {
		log.Fatalf("%s: %s", cldrArchivePath, err)
	}
	db.SetDraftLevel(cldr.Contributed, false)
	supd := db.Supplemental()
	log.Println("Loaded.")

	type currency struct {
		Code string

		Digits       uint
		Rounding     uint
		CashDigits   uint
		CashRounding uint

		Countries []string
	}

	currencies := make(map[string]*currency, len(supd.CurrencyData.Fractions))
	for _, frac := range supd.CurrencyData.Fractions[0].Info {
		if len(frac.Iso4217) != 3 {
			continue
		}

		var c currency

		c.Code = frac.Iso4217
		c.Digits = atou(frac.Digits, 2)
		c.Rounding = atou(frac.Rounding, 0)
		c.CashDigits = atou(frac.CashDigits, c.Digits)
		c.CashRounding = atou(frac.CashRounding, c.Rounding)

		currencies[c.Code] = &c
	}

	for _, r := range supd.CurrencyData.Region {
		for _, cu := range r.Currency {
			// We want only tender legal currencies, not "XXX" or Gold
			if cu.Tender == "false" {
				continue
			}
			// We keep only current currencies
			if len(cu.To) > 0 {
				continue
			}
			c := currencies[cu.Iso4217]
			if c == nil {
				c = &currency{
					Code:         cu.Iso4217,
					Digits:       2,
					Rounding:     0,
					CashDigits:   2,
					CashRounding: 0,
				}
				currencies[c.Code] = c
			}
			c.Countries = append(c.Countries, r.Iso3166)
		}
	}

	var maxFractionCashDigits uint
	for _, c := range currencies {
		if len(c.Countries) == 0 {
			log.Printf("Removing %s: no countries", c.Code)
			delete(currencies, c.Code)
			continue
		}
		sort.Strings(c.Countries)

		if c.CashDigits > maxFractionCashDigits {
			maxFractionCashDigits = c.CashDigits
		}
	}

	fmt.Println(len(currencies), "currencies.")

	codegen.MustParse(template).Template.Execute(os.Stdout, map[string]interface{}{
		"file":                  filepath.Base(cldrArchivePath),
		"currencies":            currencies,
		"maxFractionCashDigits": maxFractionCashDigits,
	})

	err = codegen.MustParse(template).CreateFile("currencies.go", map[string]interface{}{
		"file":                  filepath.Base(cldrArchivePath),
		"currencies":            currencies,
		"maxFractionCashDigits": maxFractionCashDigits,
	})
	if err != nil {
		log.Fatal(err)
	}
}
